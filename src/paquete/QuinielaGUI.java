/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package paquete;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTextField;

/**
 *
 * @author Sistemas
 */
public class QuinielaGUI extends javax.swing.JFrame {

    /**
     * Creates new form QuinielaGUI
     */
    
    String ServidorWebConnectionUsername="upxs62su42vgwjvr";
    String ServidorWebConnectionPassword="Wv0i6wqcFNBsv39q0Ujb";
    String ServidorWebConnectionPath="jdbc:mysql://bsvnfpx3tdjhqovlt1z5-mysql.services.clever-cloud.com/bsvnfpx3tdjhqovlt1z5?verifyServerCertificate=false&useSSL=false&requireSSL=false";
    String LocalHostConnectionPath="jdbc:mysql://localhost:3306/sql12272834?verifyServerCertificate=false&useSSL=false&requireSSL=false";
    String LocalHostConnectionUsername="root";
    String LocalHostConnectionPassword="root";
    String username="";
    String password="";
    String connectionPath="";
    public QuinielaGUI() {
        
        initComponents();
        String[] options = {"MySQL Servidor Internet", "MySQL ServidorLocal"};
        int x = JOptionPane.showOptionDialog(null, "Â¿A que Servidor te deseas conectar?",
                "Selecciona la opcion",
                JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);
        if(x==0){
        ConexionServidorWeb();
        }else if (x==1){
        ConexionLocalHost();
        }
        System.out.println(username);
        System.out.println(password);
        System.out.println(connectionPath);
        //ObtenerIdEquipos();
    ActualizaInterfaz();
//Una vez que se terminen de realizar los cambios en la logica volvere a actualizar la interfaz
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        jComboBox3 = new javax.swing.JComboBox<>();
        jComboBox4 = new javax.swing.JComboBox<>();
        jComboBox5 = new javax.swing.JComboBox<>();
        jComboBox6 = new javax.swing.JComboBox<>();
        jComboBox7 = new javax.swing.JComboBox<>();
        jComboBox8 = new javax.swing.JComboBox<>();
        jComboBox9 = new javax.swing.JComboBox<>();
        jComboBox10 = new javax.swing.JComboBox<>();
        jComboBox11 = new javax.swing.JComboBox<>();
        jComboBox12 = new javax.swing.JComboBox<>();
        jComboBox13 = new javax.swing.JComboBox<>();
        jComboBox14 = new javax.swing.JComboBox<>();
        jComboBox15 = new javax.swing.JComboBox<>();
        jComboBox16 = new javax.swing.JComboBox<>();
        jComboBox17 = new javax.swing.JComboBox<>();
        jComboBox18 = new javax.swing.JComboBox<>();
        jCheckBox1 = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jCheckBox4 = new javax.swing.JCheckBox();
        jCheckBox5 = new javax.swing.JCheckBox();
        jCheckBox6 = new javax.swing.JCheckBox();
        jCheckBox7 = new javax.swing.JCheckBox();
        jCheckBox8 = new javax.swing.JCheckBox();
        jCheckBox9 = new javax.swing.JCheckBox();
        jCheckBox10 = new javax.swing.JCheckBox();
        jCheckBox11 = new javax.swing.JCheckBox();
        jCheckBox12 = new javax.swing.JCheckBox();
        jCheckBox13 = new javax.swing.JCheckBox();
        jCheckBox14 = new javax.swing.JCheckBox();
        jCheckBox15 = new javax.swing.JCheckBox();
        jCheckBox16 = new javax.swing.JCheckBox();
        jCheckBox17 = new javax.swing.JCheckBox();
        jCheckBox18 = new javax.swing.JCheckBox();
        jCheckBox19 = new javax.swing.JCheckBox();
        jCheckBox20 = new javax.swing.JCheckBox();
        jCheckBox21 = new javax.swing.JCheckBox();
        jCheckBox22 = new javax.swing.JCheckBox();
        jCheckBox23 = new javax.swing.JCheckBox();
        jCheckBox24 = new javax.swing.JCheckBox();
        jCheckBox25 = new javax.swing.JCheckBox();
        jCheckBox26 = new javax.swing.JCheckBox();
        jCheckBox27 = new javax.swing.JCheckBox();
        jButton4 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jTextField19 = new javax.swing.JTextField();
        jComboBox37 = new javax.swing.JComboBox<>();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jComboBox19 = new javax.swing.JComboBox<>();
        jComboBox21 = new javax.swing.JComboBox<>();
        jComboBox23 = new javax.swing.JComboBox<>();
        jComboBox25 = new javax.swing.JComboBox<>();
        jComboBox27 = new javax.swing.JComboBox<>();
        jComboBox29 = new javax.swing.JComboBox<>();
        jComboBox31 = new javax.swing.JComboBox<>();
        jComboBox33 = new javax.swing.JComboBox<>();
        jComboBox35 = new javax.swing.JComboBox<>();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        jTextField9 = new javax.swing.JTextField();
        jTextField10 = new javax.swing.JTextField();
        jTextField11 = new javax.swing.JTextField();
        jTextField12 = new javax.swing.JTextField();
        jTextField13 = new javax.swing.JTextField();
        jTextField14 = new javax.swing.JTextField();
        jTextField15 = new javax.swing.JTextField();
        jTextField16 = new javax.swing.JTextField();
        jTextField17 = new javax.swing.JTextField();
        jTextField18 = new javax.swing.JTextField();
        jComboBox20 = new javax.swing.JComboBox<>();
        jComboBox22 = new javax.swing.JComboBox<>();
        jComboBox24 = new javax.swing.JComboBox<>();
        jComboBox26 = new javax.swing.JComboBox<>();
        jComboBox28 = new javax.swing.JComboBox<>();
        jComboBox30 = new javax.swing.JComboBox<>();
        jComboBox32 = new javax.swing.JComboBox<>();
        jComboBox34 = new javax.swing.JComboBox<>();
        jComboBox36 = new javax.swing.JComboBox<>();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jCheckBox28 = new javax.swing.JCheckBox();
        jCheckBox29 = new javax.swing.JCheckBox();
        jCheckBox30 = new javax.swing.JCheckBox();
        jCheckBox31 = new javax.swing.JCheckBox();
        jCheckBox32 = new javax.swing.JCheckBox();
        jCheckBox33 = new javax.swing.JCheckBox();
        jCheckBox34 = new javax.swing.JCheckBox();
        jCheckBox35 = new javax.swing.JCheckBox();
        jCheckBox36 = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox1.setMinimumSize(new java.awt.Dimension(120, 30));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox2.setMinimumSize(new java.awt.Dimension(120, 20));

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox3.setMinimumSize(new java.awt.Dimension(120, 20));

        jComboBox4.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox4.setMinimumSize(new java.awt.Dimension(120, 20));

        jComboBox5.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox5.setMinimumSize(new java.awt.Dimension(120, 20));

        jComboBox6.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox6.setMinimumSize(new java.awt.Dimension(120, 20));

        jComboBox7.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox7.setMinimumSize(new java.awt.Dimension(120, 20));

        jComboBox8.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox8.setMinimumSize(new java.awt.Dimension(120, 20));

        jComboBox9.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox9.setMinimumSize(new java.awt.Dimension(120, 20));

        jComboBox10.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox10.setMinimumSize(new java.awt.Dimension(120, 20));

        jComboBox11.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox11.setMinimumSize(new java.awt.Dimension(120, 20));

        jComboBox12.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox12.setMinimumSize(new java.awt.Dimension(120, 20));

        jComboBox13.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox13.setMinimumSize(new java.awt.Dimension(120, 20));

        jComboBox14.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox14.setMinimumSize(new java.awt.Dimension(120, 20));

        jComboBox15.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox15.setMinimumSize(new java.awt.Dimension(120, 20));

        jComboBox16.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox16.setMinimumSize(new java.awt.Dimension(120, 20));

        jComboBox17.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox17.setMinimumSize(new java.awt.Dimension(120, 20));

        jComboBox18.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox18.setMinimumSize(new java.awt.Dimension(120, 20));

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paquete/rsz_308397869.png"))); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paquete/rsz_1024px-edit-clearsvg.png"))); // NOI18N
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(24, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton4)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jCheckBox25)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jComboBox17, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jCheckBox22)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jComboBox15, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jCheckBox19)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jComboBox13, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jCheckBox7)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jComboBox5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jCheckBox4)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jCheckBox1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jCheckBox10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox7, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jCheckBox13)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox9, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jCheckBox16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox11, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox2)
                            .addComponent(jCheckBox5)
                            .addComponent(jCheckBox8)
                            .addComponent(jCheckBox11)
                            .addComponent(jCheckBox14)
                            .addComponent(jCheckBox17)
                            .addComponent(jCheckBox20)
                            .addComponent(jCheckBox23)
                            .addComponent(jCheckBox26))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox3))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox6))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jComboBox6, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox9))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jComboBox8, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox12))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jComboBox10, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox15))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jComboBox12, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox18))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jComboBox14, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox21))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jComboBox16, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox24))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jComboBox18, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jCheckBox27))
                    .addComponent(jButton7))
                .addContainerGap(272, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox1)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jCheckBox2)
                        .addComponent(jCheckBox3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox4)
                    .addComponent(jCheckBox5)
                    .addComponent(jCheckBox6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox7)
                    .addComponent(jCheckBox8)
                    .addComponent(jCheckBox9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox10)
                    .addComponent(jCheckBox11)
                    .addComponent(jCheckBox12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox13)
                    .addComponent(jCheckBox14)
                    .addComponent(jCheckBox15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jCheckBox16)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jComboBox11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jComboBox12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jCheckBox17)
                        .addComponent(jCheckBox18)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox19)
                    .addComponent(jCheckBox20)
                    .addComponent(jCheckBox21))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox22)
                    .addComponent(jCheckBox23)
                    .addComponent(jCheckBox24))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox25)
                    .addComponent(jCheckBox26)
                    .addComponent(jCheckBox27))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton4)
                    .addComponent(jButton7))
                .addContainerGap(74, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Quiniela", jPanel1);

        jTextField19.setText("Nombre");

        jComboBox37.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paquete/rsz_1rsz_trashicon.png"))); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paquete/rsz_add-512.png"))); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBox37, 0, 100, Short.MAX_VALUE)
                    .addComponent(jTextField19))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3)
                    .addComponent(jButton2))
                .addContainerGap(378, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addComponent(jButton2))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(jComboBox37, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(57, 57, 57)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(jTextField19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(174, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Equipos", jPanel3);

        jTextField1.setText("0");

        jTextField2.setText("0");

        jComboBox19.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jComboBox21.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jComboBox23.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jComboBox25.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jComboBox27.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jComboBox29.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jComboBox31.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jComboBox33.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jComboBox35.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jTextField3.setText("0");

        jTextField4.setText("0");

        jTextField5.setText("0");

        jTextField6.setText("0");

        jTextField7.setText("0");

        jTextField8.setText("0");

        jTextField9.setText("0");

        jTextField10.setText("0");

        jTextField11.setText("0");

        jTextField12.setText("0");

        jTextField13.setText("0");

        jTextField14.setText("0");

        jTextField15.setText("0");

        jTextField16.setText("0");

        jTextField17.setText("0");

        jTextField18.setText("0");

        jComboBox20.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox20.setMinimumSize(new java.awt.Dimension(56, 100));

        jComboBox22.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox22.setMinimumSize(new java.awt.Dimension(56, 100));

        jComboBox24.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox24.setMinimumSize(new java.awt.Dimension(56, 100));

        jComboBox26.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox26.setMinimumSize(new java.awt.Dimension(56, 100));

        jComboBox28.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox28.setMinimumSize(new java.awt.Dimension(56, 100));

        jComboBox30.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox30.setMinimumSize(new java.awt.Dimension(56, 100));

        jComboBox32.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox32.setMinimumSize(new java.awt.Dimension(56, 100));

        jComboBox34.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox34.setMinimumSize(new java.awt.Dimension(56, 100));

        jComboBox36.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jComboBox36.setMinimumSize(new java.awt.Dimension(56, 100));

        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paquete/rsz_download.png"))); // NOI18N
        jButton5.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                jButton5AncestorAdded(evt);
            }
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paquete/rsz_upload.png"))); // NOI18N
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paquete/rsz_1soccer.jpg"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jCheckBox34.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox34ActionPerformed(evt);
            }
        });

        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/paquete/rsz_1024px-edit-clearsvg.png"))); // NOI18N
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jComboBox19, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jComboBox21, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jComboBox23, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jComboBox25, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jComboBox20, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jCheckBox28))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jComboBox22, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jCheckBox29))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jComboBox24, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jCheckBox30))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jComboBox26, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jCheckBox31))))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jComboBox27, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox28, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBox32))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jComboBox29, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox30, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBox33))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jComboBox31, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox32, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jCheckBox34))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jComboBox33, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField15, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField16, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox34, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jCheckBox36)
                                    .addComponent(jCheckBox35))))
                        .addGap(0, 187, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton5)
                                    .addComponent(jButton6))
                                .addGap(47, 47, 47)
                                .addComponent(jButton1))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jComboBox35, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(9, 9, 9)
                                .addComponent(jTextField17, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField18, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox36, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(jButton8)))
                        .addGap(198, 198, 198))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBox28))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox22, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBox29))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox23, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox24, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBox30))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox25, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox26, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBox31))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox27, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox28, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBox32))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox29, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox30, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCheckBox33))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox31, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox32, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jCheckBox34)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox33, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox34, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox35))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox35, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox36, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox36))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jButton5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                                .addComponent(jButton6))
                            .addComponent(jButton1))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jButton8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(37, 37, 37))))
        );

        jTabbedPane1.addTab("Resultados", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addGap(99, 99, 99))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jTabbedPane1)
                .addGap(45, 45, 45))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
 
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JTextField[] ListaTextField = {jTextField1,jTextField2,jTextField3,jTextField4,jTextField5,jTextField6,jTextField7,
        jTextField8,jTextField9,jTextField10,jTextField11,jTextField12,jTextField13,jTextField14,jTextField15,jTextField16,
        jTextField17,jTextField18};
        JCheckBox[] ListaCheckBox2 = {jCheckBox28,jCheckBox29,jCheckBox30,jCheckBox31,jCheckBox32,jCheckBox33,jCheckBox34,jCheckBox35,jCheckBox36};
        AgregarResultados(ListaTextField);
        ComparaPronosticoResultado(ListaCheckBox2);
        ActualizaInterfaz();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
//Ya revise esta opcion para la nueva version 17-Abril-2019
//INSERT INTO Equipos (IdEquipo, Nombre, Posicion)VALUES (2, 'Orden', 0);
int IdEquipo=ContarEquipos()+1;
String Nombre=jTextField19.getText();
String query="INSERT INTO equipos (IdEquipo, Nombre,Orden)VALUES ("
        +IdEquipo+""
        +", '"+Nombre+"', 0"
        +");";
System.out.println(query);
AgregarEquipo(query);
LimpiarIdsEquipos();
//ActualizaInterfaz();
//Una vez que se terminen de realizar los cambios en la logica volvere a actualizar la interfaz
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String Nombre=jComboBox37.getItemAt(jComboBox37.getSelectedIndex());
        String query="DELETE FROM equipos WHERE Nombre='"+Nombre+"'";
        EliminarEquipo(query);
        LimpiarIdsEquipos();
        //arreglar IdsEquipo Ordenar por Nombre ASC y asignar incremental
        ActualizaInterfaz();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        JComboBox ListaComboBox[]={jComboBox1,jComboBox2,jComboBox3,jComboBox4,jComboBox5,jComboBox6,jComboBox7,jComboBox8,jComboBox9,jComboBox10,
        jComboBox11,jComboBox12,jComboBox13,jComboBox14,jComboBox15,jComboBox16,jComboBox17,jComboBox18,jComboBox19,jComboBox20,jComboBox21,
        jComboBox22,jComboBox23,jComboBox24,jComboBox25,jComboBox26,jComboBox27,jComboBox28,jComboBox29,jComboBox30,jComboBox31,jComboBox32,
        jComboBox33,jComboBox34,jComboBox35,jComboBox36};    
        JCheckBox[] ListaCheckBox = {jCheckBox1,jCheckBox2,jCheckBox3,jCheckBox4,jCheckBox5,jCheckBox6,jCheckBox7,jCheckBox8,jCheckBox9,jCheckBox10,
        jCheckBox11,jCheckBox12,jCheckBox13,jCheckBox14,jCheckBox15,jCheckBox16,jCheckBox17,jCheckBox18,jCheckBox19,jCheckBox20,jCheckBox21,
        jCheckBox22,jCheckBox23,jCheckBox24,jCheckBox25,jCheckBox26,jCheckBox27};
        JCheckBox[] ListaCheckBox2 = {jCheckBox28,jCheckBox29,jCheckBox30,jCheckBox31,jCheckBox32,jCheckBox33,jCheckBox34,jCheckBox35,jCheckBox36};
        //AgregarEquiposComboBox(ListaComboBox); ya esta funcionando y en ActualizaInterfaz
        //PonerJornadaComboBox(ListaComboBox,15); ya esta funcionando y en ActualizaInterfaz
        //En este boton se Guardara la jornada, las quinielas individuales se van a registrar en otro boton
        //El siguiente paso sera inicializar las jornadas para que estos metodos queden completos
        GuardarJornada(ListaComboBox);
        
//Guardar QuinielaUsuario sera un metodo separado para poder brindar una mejor funcionalidad al programa
//va a estar ubicado en otro boton, primero se revisara la funcionalidad de las jornadas
//GuardarQuinielaUsuario(ListaCheckBox,ListaCheckBox2);
//   ActualizaInterfaz();
//Una vez que se terminen de realizar los cambios en la logica volvere a actualizar la interfaz
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        ConexionServidorWeb();
        int contador=0;
        contador=contarTodoServidorWeb("SELECT COUNT(*) FROM quiniela");
        PasarTablaQuinielaServidorWebALocalHost(contador);
        contador=contarTodoServidorWeb("SELECT COUNT(*) FROM equipos");
        PasarTablaEquiposServidorWebALocalHost(contador);
        contador=contarTodoServidorWeb("SELECT COUNT(*) FROM resultados");
        PasarTablaResultadosServidorWebALocalHost(contador);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton5AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_jButton5AncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5AncestorAdded

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        ConexionLocalHost();
        int contador=0;
        contador=contarTodoLocalHost("SELECT COUNT(*) FROM quiniela");
        PasarTablaQuinielaLocalHostAServidorWeb(contador);
        contador=contarTodoLocalHost("SELECT COUNT(*) FROM equipos");
        PasarTablaEquiposLocalHostAServidorWeb(contador);
        contador=contarTodoLocalHost("SELECT COUNT(*) FROM resultados");
        PasarTablaResultadosLocalHostAServidorWeb(contador);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jCheckBox34ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox34ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox34ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
LimpiarInterfaz();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        JTextField[] ListaTextField = {jTextField1,jTextField2,jTextField3,jTextField4,jTextField5,jTextField6,jTextField7,
        jTextField8,jTextField9,jTextField10,jTextField11,jTextField12,jTextField13,jTextField14,jTextField15,jTextField16,
        jTextField17,jTextField18};
        JCheckBox[] ListaCheckBox2 = {jCheckBox28,jCheckBox29,jCheckBox30,jCheckBox31,jCheckBox32,jCheckBox33,jCheckBox34,jCheckBox35,jCheckBox36};
        LimpiarResultados(ListaTextField);
        ComparaPronosticoResultado(ListaCheckBox2);
        ActualizaInterfaz();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QuinielaGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QuinielaGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QuinielaGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QuinielaGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QuinielaGUI().setVisible(true);
            }
        });
    }
    
    public int ContarEquipos(){
    //String username="sql12272834";
    //String password="jInC6T7H6S";
    String query="SELECT COUNT(IdEquipo) FROM equipos;";
    int MaxIdEquipo=0;
    //String connectionPath="jdbc:mysql://localhost:3306/proveedores";
    //String connectionPath2="jdbc:mysql://sql12.freemysqlhosting.net:3306/Equipos?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC";
    //String connectionPath2="jdbc:mysql://sql12.freemysqlhosting.net:3306/sql12272834";
    //jdbc:mysql://localhost/db?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC
    Connection connection=null;
    ResultSet resultados=null;
    try{
//System.out.println(username +" " +password);
connection=DriverManager.getConnection(connectionPath,username,password);
PreparedStatement statement= connection.prepareStatement(query);
resultados=statement.executeQuery();
while (resultados.next()){
    MaxIdEquipo=resultados.getInt("COUNT(IdEquipo)");
   // System.out.println(MaxIdEquipo);
}
statement.close();
connection.close();

    }catch(SQLException exception){
        JOptionPane.showMessageDialog(null, exception);
        System.err.println(exception);
    }
    return MaxIdEquipo;
    }
    
        public boolean ChecarJornada(int jornada){
            boolean checarJornada=false;
    //Con este metodo revisare si la jornada ya se ha registrado anteriormente o si es la primera vez
    //String username="sql12272834";
    //String password="jInC6T7H6S";
    String query="SELECT COUNT(IdJornada) FROM jornada where IdJornada="+jornada+";";
    int MaxIdEquipo=0;
    //String connectionPath="jdbc:mysql://localhost:3306/proveedores";
    //String connectionPath2="jdbc:mysql://sql12.freemysqlhosting.net:3306/Equipos?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC";
    //String connectionPath2="jdbc:mysql://sql12.freemysqlhosting.net:3306/sql12272834";
    //jdbc:mysql://localhost/db?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC
    Connection connection=null;
    ResultSet resultados=null;
    try{
//System.out.println(username +" " +password);
connection=DriverManager.getConnection(connectionPath,username,password);
PreparedStatement statement= connection.prepareStatement(query);
resultados=statement.executeQuery();
while (resultados.next()){
    MaxIdEquipo=resultados.getInt("COUNT(IdJornada)");
   // System.out.println(MaxIdEquipo);
}
statement.close();
connection.close();

    }catch(SQLException exception){
        JOptionPane.showMessageDialog(null, exception);
        System.err.println(exception);
    }
    if(MaxIdEquipo>0)
        checarJornada=true;
    return checarJornada;
    }
    
    public void AgregarEquipo(String query){
    //String username="sql12272834";
    //String password="jInC6T7H6S";
    int contador=0;
    //String resultado="";
    //String connectionPath="jdbc:mysql://localhost:3306/proveedores";
    //String connectionPath2="jdbc:mysql://sql12.freemysqlhosting.net:3306/Equipos?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC";
    //String connectionPath2="jdbc:mysql://sql12.freemysqlhosting.net:3306/sql12272834";
    //jdbc:mysql://localhost/db?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC
    Connection connection=null;
    ResultSet resultados=null;
    try{
connection=DriverManager.getConnection(connectionPath,username,password);
PreparedStatement statement= connection.prepareStatement(query);
statement.executeUpdate();
statement.close();
connection.close();
    }catch(SQLException exception){
        JOptionPane.showMessageDialog(null, exception);
        System.err.println(exception);
    }}
    
    public void BorrarRegistrosTablaEquiposLocalHost(){
    String query="DELETE FROM equipos WHERE IdEquipo >= 0";
    ConexionLocalHost();
    int contador=0;
    Connection connection=null;
    ResultSet resultados=null;
    try{
connection=DriverManager.getConnection(connectionPath,username,password);
PreparedStatement statement= connection.prepareStatement(query);
statement.executeUpdate();
statement.close();
connection.close();
    }catch(SQLException exception){
        JOptionPane.showMessageDialog(null, exception);
        System.err.println(exception);
    }}
    
    public void BorrarRegistrosTablaEquiposServidorWeb(){
    String query="DELETE FROM equipos WHERE IdEquipo >= 0";
    ConexionServidorWeb();
    int contador=0;
    Connection connection=null;
    ResultSet resultados=null;
    try{
connection=DriverManager.getConnection(connectionPath,username,password);
PreparedStatement statement= connection.prepareStatement(query);
statement.executeUpdate();
statement.close();
connection.close();
    }catch(SQLException exception){
        JOptionPane.showMessageDialog(null, exception);
        System.err.println(exception);
    }
    }
    
    public void BorrarRegistrosTablaResultadosServidorWeb(){
    String query="DELETE FROM resultados WHERE IdPartido >= 0";
    ConexionServidorWeb();
    int contador=0;
    Connection connection=null;
    ResultSet resultados=null;
    try{
connection=DriverManager.getConnection(connectionPath,username,password);
PreparedStatement statement= connection.prepareStatement(query);
statement.executeUpdate();
statement.close();
connection.close();
    }catch(SQLException exception){
        JOptionPane.showMessageDialog(null, exception);
        System.err.println(exception);
    }}
    
    public void BorrarRegistrosTablaResultadosLocalHost(){
    String query="DELETE FROM resultados WHERE IdPartido >= 0";
    ConexionLocalHost();
    int contador=0;
    Connection connection=null;
    ResultSet resultados=null;
    try{
connection=DriverManager.getConnection(connectionPath,username,password);
PreparedStatement statement= connection.prepareStatement(query);
statement.executeUpdate();
statement.close();
connection.close();
    }catch(SQLException exception){
        JOptionPane.showMessageDialog(null, exception);
        System.err.println(exception);
    }}
    
    public void BorrarRegistrosTablaQuinielaLocalHost(){
    String query="DELETE FROM quiniela WHERE IdPartido >= 0";
    ConexionLocalHost();
    int contador=0;
    Connection connection=null;
    ResultSet resultados=null;
    try{
connection=DriverManager.getConnection(connectionPath,username,password);
PreparedStatement statement= connection.prepareStatement(query);
statement.executeUpdate();
statement.close();
connection.close();
    }catch(SQLException exception){
        JOptionPane.showMessageDialog(null, exception);
        System.err.println(exception);
    }
    }
    
    public void BorrarRegistrosTablaQuinielaServidorWeb(){
    String query="DELETE FROM quiniela WHERE IdPartido >= 0";
    ConexionServidorWeb();
    int contador=0;
    Connection connection=null;
    ResultSet resultados=null;
    try{
connection=DriverManager.getConnection(connectionPath,username,password);
PreparedStatement statement= connection.prepareStatement(query);
statement.executeUpdate();
statement.close();
connection.close();
    }catch(SQLException exception){
        JOptionPane.showMessageDialog(null, exception);
        System.err.println(exception);
    }
    }
        
    public void EliminarEquipo(String query){
    //String username="sql12272834";
    //String password="jInC6T7H6S";
    //String resultado="";
    //String connectionPath="jdbc:mysql://localhost:3306/proveedores";
    //String connectionPath2="jdbc:mysql://sql12.freemysqlhosting.net:3306/Equipos?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC";
    //String connectionPath2="jdbc:mysql://sql12.freemysqlhosting.net:3306/sql12272834";
    //jdbc:mysql://localhost/db?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC
    Connection connection=null;
    ResultSet resultados=null;
    try{
connection=DriverManager.getConnection(connectionPath,username,password);
PreparedStatement statement= connection.prepareStatement(query);
        //System.out.println(query);
statement.executeUpdate();
statement.close();
connection.close();
    }catch(SQLException exception){
        JOptionPane.showMessageDialog(null, exception);
        System.err.println(exception);
    }
    }
    
    public void AgregarEquiposComboBox(JComboBox ListaComboBox[]){
    //String username="sql12272834";
    //String password="jInC6T7H6S";
    //Parece que ya esta lista esta funcion vamos a probarla
    String query="SELECT Nombre FROM equipos ORDER BY Orden ASC";
    int contador=0;
    int MaxIdEquipo=ContarEquipos();
    String[] Nombres = new String[MaxIdEquipo];
    //String connectionPath="jdbc:mysql://localhost:3306/proveedores";
    //String connectionPath2="jdbc:mysql://sql12.freemysqlhosting.net:3306/Equipos?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC";
    //String connectionPath2="jdbc:mysql://sql12.freemysqlhosting.net:3306/sql12272834";
    //jdbc:mysql://localhost/db?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC
    Connection connection=null;
    ResultSet resultados=null;
    try{
//System.out.println(username +" " +password);
jComboBox37.removeAllItems();
String auxiliar="";
connection=DriverManager.getConnection(connectionPath,username,password);
PreparedStatement statement= connection.prepareStatement(query);
resultados=statement.executeQuery(query);
while (resultados.next()){
    jComboBox37.addItem(resultados.getString("Nombre"));
}
statement.close();
connection.close();
    }catch(SQLException exception){
        JOptionPane.showMessageDialog(null, exception);
        System.err.println(exception);
    }
    contador=0;
    do{
    ListaComboBox[contador].removeAllItems();
    contador=contador+1;
    }while(contador<36);
    contador=0;
    int contador2=0;
    do{
    contador2=0;
    while(contador2<MaxIdEquipo){
        ListaComboBox[contador].addItem(jComboBox37.getItemAt(contador2));
        //System.out.println(jComboBox37.getItemAt(contador2)+"");
        contador2=contador2+1;
    }
    contador=contador+1;
    }while(contador<36);
//     Una vez que se pueda guardar la posicion exitosamente vamos a regresar a este punto para poder mostrar la jornada 
//     int [] IdEquipos=ObtenerIdEquipos();
//        Posicion(IdEquipos);
    }
    
    public int[] ObtenerIdEquiposNombre(String []Nombres){
    //Esta funcion me regresara los IdEquipo cuando yo le de los Nombres
    //Ya quedo lista esta funcion
        
    //String username="sql12272834";
    //String password="jInC6T7H6S";
    int Equipo=0;
    int [] IdEquipos= new int[20];
    int contador=0;
    do{
    String query="SELECT IdEquipo FROM equipos WHERE Nombre="+'"'+Nombres[contador]+'"';
     //   System.out.println(query);
    //String connectionPath="jdbc:mysql://localhost:3306/proveedores";
    //String connectionPath2="jdbc:mysql://sql12.freemysqlhosting.net:3306/Equipos?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC";
    //String connectionPath2="jdbc:mysql://sql12.freemysqlhosting.net:3306/sql12272834";
    //jdbc:mysql://localhost/db?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC
    Connection connection=null;
    ResultSet resultados=null;
    try{
//System.out.println(username +" " +password);
connection=DriverManager.getConnection(connectionPath,username,password);
PreparedStatement statement= connection.prepareStatement(query);
resultados=statement.executeQuery();
//if(resultados.next()==false)
//{Equipo=0;}
//else
while (resultados.next()){
   IdEquipos[contador]=resultados.getInt("IdEquipo");
}statement.close();
connection.close();
    }catch(SQLException exception){
        JOptionPane.showMessageDialog(null, exception);
        System.err.println(exception);
    }
    contador=contador+1;
        System.out.println(contador);
    }while(contador<18);
    
        System.out.println("Se termino el metodo Obtener IdEquipos");
    return IdEquipos;    
    }
    
    public void Posicion(int [] IdEquipos){
        //Primero vamos a trabajar en guardar la posicion y mas adelante regresare a este metodo para poder mostrarla en pantalla
        //Posicion 1
        //SELECT IdEquipo FROM Equipos WHERE Posicion=10
        //Equipo 1, Id 2, Posicion 1
        int posicion=0;
        JComboBox ListaComboBox[]={jComboBox1,jComboBox2,jComboBox3,jComboBox4,jComboBox5,jComboBox6,jComboBox7,jComboBox8,jComboBox9,jComboBox10,
        jComboBox11,jComboBox12,jComboBox13,jComboBox14,jComboBox15,jComboBox16,jComboBox17,jComboBox18,jComboBox19,jComboBox20,jComboBox21,
        jComboBox22,jComboBox23,jComboBox24,jComboBox25,jComboBox26,jComboBox27,jComboBox28,jComboBox29,jComboBox30,jComboBox31,jComboBox32,
        jComboBox33,jComboBox34,jComboBox35,jComboBox36,jComboBox37};
       int contador2=0;
        do{
            contador2=IdEquipos[posicion+1]-1;
            if(contador2<0)
                contador2=0;
        ListaComboBox[posicion].setSelectedIndex(contador2);
        ListaComboBox[posicion+18].setSelectedIndex(contador2);
            posicion=posicion+1;
        }while(posicion<18);
        
        
        int IdEquipo=0;
    }
    
    public void GuardarJornada(JComboBox ListaComboBox[]){
    String [] Nombres= new String[18];
    int []IdEquipos=new int[18];

    int contador=0;
    do{
       Nombres[contador]=ListaComboBox[contador].getSelectedItem()+"";
       contador++;
        }while(contador<18);
        IdEquipos=ObtenerIdEquiposNombre(Nombres);
    //Este metodo ya quedo, ahora sigue acomodar a los equipos segun la posicion que tengan
    //INSERT INTO jornada(IdEquipo, Posicion,IdJornada) VALUES (1,5,18),(18,5,1);
    if(ChecarJornada(11))
    //System.out.println("Jornada ya registrada");
    ActualizarJornada(15, IdEquipos);    
    //true
    else
    AgregarJornadaNueva(15, IdEquipos);
//System.out.println("Jornada Nueva");
    //false    
    }
    
    public void GuardarQuinielaUsuario(JCheckBox ListaCheckBox[],JCheckBox ListaCheckBox2[]){
    int contador=1;
    int PosicionArreglo=0;
    int auxiliar=0;
    int [] PronosticoPartidos= ObtenerCheckBoxPronosticos(ListaCheckBox, ListaCheckBox2);
    Connection connection=null;
    ResultSet resultados=null;
    contador=1;
    PosicionArreglo=0;
    String query="UPDATE quiniela SET Pronostico = CASE IdPartido ";
   //WHEN 1   THEN 7
   //WHEN 2   THEN 0 
   //WHEN 3   THEN 0 
   //WHEN 4   THEN 0 
   //WHEN 5   THEN 0 
   //WHEN 6   THEN 0 
   //WHEN 7   THEN 0 
   //WHEN 8   THEN 0 
   //WHEN 9   THEN 0 
   //END;
   do{
   query=query+"WHEN "+contador+" THEN "+PronosticoPartidos[PosicionArreglo]+" ";
   contador=contador+1;
   PosicionArreglo=contador-1;
   }while(contador<10);
   query=query+" END;";
    try{
connection=DriverManager.getConnection(connectionPath,username,password);
PreparedStatement statement= connection.prepareStatement(query);
        System.out.println(query);
statement.executeUpdate();
statement.close();
connection.close();
    }catch(SQLException exception){
        JOptionPane.showMessageDialog(null, exception);
        System.err.println(exception);
    }
    }
    
    public int contarTodoServidorWeb(String query){
    ConexionServidorWeb();
    int contador=0;
    Connection connection=null;
    ResultSet resultados=null;
    try{
    connection=DriverManager.getConnection(connectionPath,username,password);
PreparedStatement statement= connection.prepareStatement(query);
resultados=statement.executeQuery();
while (resultados.next()){
    contador=resultados.getInt("COUNT(*)");
    System.out.println(contador);
}
statement.close();
connection.close();
    }catch(SQLException exception){
        System.err.println(exception);
    }
        return contador;
    }
    
    public int contarTodoLocalHost(String query){
    ConexionLocalHost();
    int contador=0;
    Connection connection=null;
    ResultSet resultados=null;
    try{
    connection=DriverManager.getConnection(connectionPath,username,password);
PreparedStatement statement= connection.prepareStatement(query);
resultados=statement.executeQuery();
while (resultados.next()){
    contador=resultados.getInt("COUNT(*)");
    System.out.println(contador);
}
statement.close();
connection.close();
    }catch(SQLException exception){
        System.err.println(exception);
    }
        return contador;
    }
    
    public void PasarTablaEquiposServidorWebALocalHost(int contador){
    ConexionServidorWeb();
    String [] Nombres= new String[contador];
    int [] IdEquipos= new int[contador];
    int [] Posicion= new int[contador];
    int PosicionArreglo=0;
    Connection connection=null;
    ResultSet resultados=null;
    String query="SELECT IdEquipo,Nombre,Posicion FROM equipos";
    try{
    connection=DriverManager.getConnection(connectionPath,username,password);

PreparedStatement statement= connection.prepareStatement(query);
resultados=statement.executeQuery();
while (resultados.next()){
    IdEquipos[PosicionArreglo]=resultados.getInt("IdEquipo");
    Posicion[PosicionArreglo]=resultados.getInt("Posicion");
    Nombres[PosicionArreglo]=resultados.getString("Nombre");
    PosicionArreglo=PosicionArreglo+1;
}
    statement.close();
    connection.close();
    }catch(SQLException exception){
        System.err.println(exception);
    }
    query="INSERT INTO equipos(IdEquipo, Nombre, Posicion)VALUES";
PosicionArreglo=0;
do{
query=query+"("+IdEquipos[PosicionArreglo]+","+"'"+Nombres[PosicionArreglo]+"',"+Posicion[PosicionArreglo]+")";
PosicionArreglo=PosicionArreglo+1;
if(PosicionArreglo<contador)
    query=query+",";
else
    query=query+";";
}while(PosicionArreglo<contador);
        System.out.println(query);
        //Borrar registros de tabla antes de pasar la informacion
    BorrarRegistrosTablaEquiposLocalHost();
        ConexionLocalHost();
        try{
connection=DriverManager.getConnection(connectionPath,username,password);
PreparedStatement statement= connection.prepareStatement(query);
statement.executeUpdate();
statement.close();
connection.close();
    }catch(SQLException exception){
        JOptionPane.showMessageDialog(null, exception);
        System.err.println(exception);
    }}
    
    public void PasarTablaQuinielaServidorWebALocalHost(int contador){
    ConexionServidorWeb();
    int [] IdPartido= new int[contador];
    int [] Pronostico= new int[contador];
    int PosicionArreglo=0;
    Connection connection=null;
    ResultSet resultados=null;
    String query="SELECT IdPartido,Pronostico FROM quiniela";
    try{
    connection=DriverManager.getConnection(connectionPath,username,password);

PreparedStatement statement= connection.prepareStatement(query);
resultados=statement.executeQuery();
while (resultados.next()){
    IdPartido[PosicionArreglo]=resultados.getInt("IdPartido");
    Pronostico[PosicionArreglo]=resultados.getInt("Pronostico");
    PosicionArreglo=PosicionArreglo+1;
}   statement.close();
    connection.close();
    }catch(SQLException exception){
        System.err.println(exception);
    }
    query="INSERT INTO quiniela(IdPartido, Pronostico)VALUES";
PosicionArreglo=0;
do{
query=query+"("+IdPartido[PosicionArreglo]+","+Pronostico[PosicionArreglo]+")";
PosicionArreglo=PosicionArreglo+1;
if(PosicionArreglo<contador)
    query=query+",";
else
    query=query+";";
}while(PosicionArreglo<contador);
        System.out.println(query);
        //Borrar registros de tabla antes de pasar la informacion
    BorrarRegistrosTablaQuinielaLocalHost();
        ConexionLocalHost();
        try{
connection=DriverManager.getConnection(connectionPath,username,password);
PreparedStatement statement= connection.prepareStatement(query);
statement.executeUpdate();
statement.close();
connection.close();
    }catch(SQLException exception){
        JOptionPane.showMessageDialog(null, exception);
        System.err.println(exception);
    }}
    
    public void ConexionLocalHost(){
    username=LocalHostConnectionUsername;
    password=LocalHostConnectionPassword;
    connectionPath=LocalHostConnectionPath;
    }
    
    public void ConexionServidorWeb(){
    username=ServidorWebConnectionUsername;
    password=ServidorWebConnectionPassword;
    connectionPath=ServidorWebConnectionPath;
    }
    
    public void PasarTablaQuinielaLocalHostAServidorWeb(int contador){
    ConexionLocalHost();
    int [] IdPartido= new int[contador];
    int [] Pronostico= new int[contador];
    int PosicionArreglo=0;
    Connection connection=null;
    ResultSet resultados=null;
    String query="SELECT IdPartido,Pronostico FROM quiniela";
    try{
    connection=DriverManager.getConnection(connectionPath,username,password);

PreparedStatement statement= connection.prepareStatement(query);
resultados=statement.executeQuery();
while (resultados.next()){
    IdPartido[PosicionArreglo]=resultados.getInt("IdPartido");
    Pronostico[PosicionArreglo]=resultados.getInt("Pronostico");
    PosicionArreglo=PosicionArreglo+1;
}   statement.close();
    connection.close();
    }catch(SQLException exception){
        System.err.println(exception);
    }
    query="INSERT INTO quiniela(IdPartido, Pronostico)VALUES";
PosicionArreglo=0;
do{
query=query+"("+IdPartido[PosicionArreglo]+","+Pronostico[PosicionArreglo]+")";
PosicionArreglo=PosicionArreglo+1;
if(PosicionArreglo<contador)
    query=query+",";
else
    query=query+";";
}while(PosicionArreglo<contador);
        System.out.println(query);
        //Borrar registros de tabla antes de pasar la informacion
    BorrarRegistrosTablaQuinielaServidorWeb();
        ConexionServidorWeb();
        try{
connection=DriverManager.getConnection(connectionPath,username,password);
PreparedStatement statement= connection.prepareStatement(query);
statement.executeUpdate();
statement.close();
connection.close();
    }catch(SQLException exception){
        JOptionPane.showMessageDialog(null, exception);
        System.err.println(exception);
    }}
    
    public void PasarTablaEquiposLocalHostAServidorWeb(int contador){
    ConexionLocalHost();
    String [] Nombres= new String[contador];
    int [] IdEquipos= new int[contador];
    int [] Posicion= new int[contador];
    int PosicionArreglo=0;
    Connection connection=null;
    ResultSet resultados=null;
    String query="SELECT IdEquipo,Nombre,Posicion FROM equipos";
    try{
    connection=DriverManager.getConnection(connectionPath,username,password);

PreparedStatement statement= connection.prepareStatement(query);
resultados=statement.executeQuery();
while (resultados.next()){
    IdEquipos[PosicionArreglo]=resultados.getInt("IdEquipo");
    Posicion[PosicionArreglo]=resultados.getInt("Posicion");
    Nombres[PosicionArreglo]=resultados.getString("Nombre");
    PosicionArreglo=PosicionArreglo+1;
}statement.close();
connection.close();
    }catch(SQLException exception){
        System.err.println(exception);
    }
    query="INSERT INTO equipos(IdEquipo, Nombre, Posicion)VALUES";
PosicionArreglo=0;
do{
query=query+"("+IdEquipos[PosicionArreglo]+","+"'"+Nombres[PosicionArreglo]+"',"+Posicion[PosicionArreglo]+")";
PosicionArreglo=PosicionArreglo+1;
if(PosicionArreglo<contador)
    query=query+",";
else
    query=query+";";
}while(PosicionArreglo<contador);
        System.out.println(query);
        //Borrar registros de tabla antes de pasar la informacion
        //Aqui voy
    BorrarRegistrosTablaEquiposServidorWeb();
        ConexionServidorWeb();
        try{
connection=DriverManager.getConnection(connectionPath,username,password);
PreparedStatement statement= connection.prepareStatement(query);
statement.executeUpdate();
statement.close();
connection.close();
    }catch(SQLException exception){
        JOptionPane.showMessageDialog(null, exception);
        System.err.println(exception);
    }}
    
    public void AgregarQuinielaCheckBox(JCheckBox ListaCheckBox[]){
        int contador=1;
        int PosicionArreglo=0;
    int [] Pronostico= new int[9];
    Connection connection=null;
    ResultSet resultados=null;
    try{ do{
    connection=DriverManager.getConnection(connectionPath,username,password);
    String query="SELECT Pronostico FROM quiniela where IdPartido="+contador;
    PosicionArreglo=contador-1;
    PreparedStatement statement= connection.prepareStatement(query);
    resultados=statement.executeQuery();
    while (resultados.next()){
    Pronostico[PosicionArreglo]=resultados.getInt("Pronostico");}
    contador=contador+1;
    statement.close();
    connection.close();
    }while(contador<=9);
   
    }catch(SQLException exception){
        System.err.println(exception);
    }
    int auxiliar=0;
    contador=1;
    do{
    PosicionArreglo=(contador*3)-3;
    auxiliar=Pronostico[contador-1];
    if(auxiliar>=4)
    {ListaCheckBox[PosicionArreglo].setSelected(true);
    auxiliar=auxiliar-4;}
    PosicionArreglo=(contador*3)-2;
    if(auxiliar>=2)
    {ListaCheckBox[PosicionArreglo].setSelected(true);
    auxiliar=auxiliar-2;}
    PosicionArreglo=(contador*3)-1;
    if(auxiliar>=1)
    {ListaCheckBox[PosicionArreglo].setSelected(true);
    auxiliar=auxiliar-1;}
    auxiliar=0;
    contador=contador+1;
    }
    while(contador<=9);
    }
    
    public void AgregarResultados(JTextField ListaTextField[]){
    int [] Local= new int[10];
    int [] Visitante= new int[10];
    int contador=1;
    int PosicionArreglo=0;
    do{
        PosicionArreglo=(contador*2)-2;
        Local[contador-1]=Integer.parseInt(ListaTextField[PosicionArreglo].getText());
        PosicionArreglo=(contador*2)-1;
        Visitante[contador-1]=Integer.parseInt(ListaTextField[PosicionArreglo].getText());
        contador=contador+1;
    }while(contador<=9);
        ActualizarMarcadores("Local", Local);
        ActualizarMarcadores("Visitante", Visitante);
    }
    
    public void LimpiarResultados(JTextField ListaTextField[]){
        int [] Local= new int[10];
        int [] Visitante= new int[10];
        int contador=1;
        int PosicionArreglo=0;
    do{
        PosicionArreglo=(contador*2)-2;
        Local[contador-1]=0;
        ListaTextField[PosicionArreglo].setText("0");
        PosicionArreglo=(contador*2)-1;
        Visitante[contador-1]=0;
        ListaTextField[PosicionArreglo].setText("0");
        contador=contador+1;
    }while(contador<=9);
        ActualizarMarcadores("Local", Local);
        ActualizarMarcadores("Visitante", Visitante);
}
    
    public void ActualizarMarcadores(String LocalVisitante,int Arreglo[]){
      Connection connection=null;
      ResultSet resultados=null;
      String query="UPDATE resultados SET "+LocalVisitante +"= CASE IdPartido ";
  //  UPDATE resultados 
  // SET Local = CASE IdPartido
  int contador=1;
  do{       
  //  WHEN 1   THEN 0
  // WHEN 2   THEN 0 
  // WHEN 3   THEN 0 
  // WHEN 4   THEN 0 
  // WHEN 5   THEN 0 
  // WHEN 6   THEN 0 
  // WHEN 7   THEN 0 
  // WHEN 8   THEN 0 
  // WHEN 9   THEN 0 
      query=query+"WHEN "+contador+" THEN " +Arreglo[contador-1]+" ";
      contador=contador+1;
  }while(contador<=9);
   //END;
   query =query+"END;";
        System.out.println(query);
    try{
connection=DriverManager.getConnection(connectionPath,username,password);
PreparedStatement statement= connection.prepareStatement(query);
statement.executeUpdate();
statement.close();
connection.close();
    }catch(SQLException exception){
        JOptionPane.showMessageDialog(null, exception);
        System.err.println(exception);
    }
    }
    
    public void ActualizarTextField(JTextField ListaTextField[])
    {
    int [] Local= ObtenerMarcadores("Local");
    int [] Visitante= ObtenerMarcadores("Visitante");
    int contador=1;
    int PosicionArreglo=0;
    do{
    PosicionArreglo=(contador*2)-2;
    ListaTextField[PosicionArreglo].setText(Local[contador-1]+"");
    PosicionArreglo=(contador*2)-1;
    ListaTextField[PosicionArreglo].setText(Visitante[contador-1]+"");
    contador=contador+1;
    }while(contador<=9);
    }
    
     public int[] ObtenerMarcadores(String LocalVisitante){
    int [] IdMarcadores= new int[9];
    int contador=1;
    do{
        //SELECT Local FROM resultados WHERE Idpartido=3
    String query="SELECT "+LocalVisitante+" FROM resultados WHERE Idpartido="+contador;
     //   System.out.println(query);
    //String connectionPath="jdbc:mysql://localhost:3306/proveedores";
    //String connectionPath2="jdbc:mysql://sql12.freemysqlhosting.net:3306/Equipos?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC";
    //String connectionPath2="jdbc:mysql://sql12.freemysqlhosting.net:3306/sql12272834";
    //jdbc:mysql://localhost/db?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC
    Connection connection=null;
    ResultSet resultados=null;
    try{
//System.out.println(username +" " +password);
connection=DriverManager.getConnection(connectionPath,username,password);
PreparedStatement statement= connection.prepareStatement(query);
resultados=statement.executeQuery();
//if(resultados.next()==false)
//{Equipo=0;}
//else
while (resultados.next()){
   IdMarcadores[contador-1]=resultados.getInt(LocalVisitante);
}statement.close();
connection.close();
    }catch(SQLException exception){
        JOptionPane.showMessageDialog(null, exception);
        System.err.println(exception);
    }
    contador=contador+1;
    }while(contador<=9);
    return IdMarcadores;    
    
    }
     
    public int[] ObtenerPronosticos(){
    int [] Pronosticos= new int[9];
    int contador=1;
    do{
    String query="SELECT Pronostico FROM quiniela WHERE Idpartido="+contador;
    Connection connection=null;
    ResultSet resultados=null;
    try{
//System.out.println(username +" " +password);
connection=DriverManager.getConnection(connectionPath,username,password);
PreparedStatement statement= connection.prepareStatement(query);
resultados=statement.executeQuery();
//if(resultados.next()==false)
//{Equipo=0;}
//else
while (resultados.next()){
   Pronosticos[contador-1]=resultados.getInt("Pronostico");
}statement.close();
connection.close();
    }catch(SQLException exception){
        JOptionPane.showMessageDialog(null, exception);
        System.err.println(exception);
    }
        System.out.println("IdPartido:"+contador+"Pronostico:"+Pronosticos[contador-1]);
        System.out.println(query);
    contador=contador+1;
    }while(contador<=9);
    return Pronosticos;    
    }
     
    public void PasarTablaResultadosLocalHostAServidorWeb(int contador){
    ConexionLocalHost();
    String [] Nombres= new String[contador];
    int [] IdPartido= new int[contador];
    int [] Local= new int[contador];
    int [] Visitante= new int[contador];
    int PosicionArreglo=0;
    Connection connection=null;
    ResultSet resultados=null;
    String query="SELECT IdPartido,Local,Visitante FROM resultados";
    try{
    connection=DriverManager.getConnection(connectionPath,username,password);
PreparedStatement statement= connection.prepareStatement(query);
resultados=statement.executeQuery();
while (resultados.next()){
    IdPartido[PosicionArreglo]=resultados.getInt("IdPartido");
    Local[PosicionArreglo]=resultados.getInt("Local");
    Visitante[PosicionArreglo]=resultados.getInt("Visitante");
    PosicionArreglo=PosicionArreglo+1;
} statement.close();
connection.close();
    }catch(SQLException exception){
        System.err.println(exception);
    }
    query="INSERT INTO resultados(IdPartido, Local, Visitante)VALUES";
PosicionArreglo=0;
do{
query=query+"("+IdPartido[PosicionArreglo]+","+Local[PosicionArreglo]+","+Visitante[PosicionArreglo]+")";
PosicionArreglo=PosicionArreglo+1;
if(PosicionArreglo<contador)
    query=query+",";
else
    query=query+";";
}while(PosicionArreglo<contador);
        System.out.println(query);
        //Borrar registros de tabla antes de pasar la informacion
        //Aqui voy
        BorrarRegistrosTablaResultadosServidorWeb();
        ConexionServidorWeb();
        try{
connection=DriverManager.getConnection(connectionPath,username,password);
PreparedStatement statement= connection.prepareStatement(query);
statement.executeUpdate();
statement.close();
connection.close();
    }catch(SQLException exception){
        JOptionPane.showMessageDialog(null, exception);
        System.err.println(exception);
    }}
    
    public void PasarTablaResultadosServidorWebALocalHost(int contador){
    ConexionServidorWeb();
    String [] Nombres= new String[contador];
    int [] IdPartido= new int[contador];
    int [] Local= new int[contador];
    int [] Visitante= new int[contador];
    int PosicionArreglo=0;
    Connection connection=null;
    ResultSet resultados=null;
    String query="SELECT IdPartido,Local,Visitante FROM resultados";
    try{
    connection=DriverManager.getConnection(connectionPath,username,password);
PreparedStatement statement= connection.prepareStatement(query);
resultados=statement.executeQuery();
while (resultados.next()){
    IdPartido[PosicionArreglo]=resultados.getInt("IdPartido");
    Local[PosicionArreglo]=resultados.getInt("Local");
    Visitante[PosicionArreglo]=resultados.getInt("Visitante");
    PosicionArreglo=PosicionArreglo+1;
}statement.close();
connection.close();
    }catch(SQLException exception){
        System.err.println(exception);
    }
    query="INSERT INTO resultados(IdPartido, Local, Visitante)VALUES";
PosicionArreglo=0;
do{
query=query+"("+IdPartido[PosicionArreglo]+","+Local[PosicionArreglo]+","+Visitante[PosicionArreglo]+")";
PosicionArreglo=PosicionArreglo+1;
if(PosicionArreglo<contador)
    query=query+",";
else
    query=query+";";
}while(PosicionArreglo<contador);
        System.out.println(query);
        //Borrar registros de tabla antes de pasar la informacion
        //Aqui voy
        BorrarRegistrosTablaResultadosLocalHost();
        ConexionLocalHost();
        try{
connection=DriverManager.getConnection(connectionPath,username,password);
PreparedStatement statement= connection.prepareStatement(query);
statement.executeUpdate();
statement.close();
connection.close();
    }catch(SQLException exception){
        JOptionPane.showMessageDialog(null, exception);
        System.err.println(exception);
    }}
    
    public void ComparaPronosticoResultado(JCheckBox ListaCheckBox2[]){
    int [] Local= ObtenerMarcadores("Local");
    int [] Visitante= ObtenerMarcadores("Visitante");
    int [] Pronostico= ObtenerPronosticos();
    int [] Resultados= new int[9];
    int TotalGoles=0;
    boolean acerto=false;
    int aciertos=0;
    int contador=1;
    do{
    if(Local[contador-1]>Visitante[contador-1])
    {Resultados[contador-1]=1;
    if(Pronostico[contador-1]==4)
        acerto=true;
    if(Pronostico[contador-1]==5)
        acerto=true;
    if(Pronostico[contador-1]==6)
        acerto=true;
    if(Pronostico[contador-1]==7)
        acerto=true;}
    
    if(Local[contador-1]==Visitante[contador-1])
    {Resultados[contador-1]=2;
    if(Pronostico[contador-1]==2)
        acerto=true;
    if(Pronostico[contador-1]==3)
        acerto=true;
    if(Pronostico[contador-1]==6)
        acerto=true;
    if(Pronostico[contador-1]==7)
        acerto=true;}
    
    if(Local[contador-1]<Visitante[contador-1])
    {Resultados[contador-1]=3;
   if(Pronostico[contador-1]==1)
        acerto=true;
    if(Pronostico[contador-1]==3)
        acerto=true;
    if(Pronostico[contador-1]==5)
        acerto=true;
    if(Pronostico[contador-1]==7)
        acerto=true;}
    ListaCheckBox2[contador-1].setSelected(acerto);
    if(acerto)
        aciertos=aciertos+1;
    TotalGoles=TotalGoles+Local[contador-1]+Visitante[contador-1];
    contador=contador+1;
    acerto=false;
    }while(contador<=9);
        jLabel1.setText("Aciertos: "+aciertos);
        jLabel2.setText("Total de Goles:"+TotalGoles);
}
    public int[] ObtenerCheckBoxPronosticos(JCheckBox ListaCheckBox[],JCheckBox ListaCheckBox2[]){
    int contador=1;
    int PosicionArreglo=0;
    int auxiliar=0;
    int [] PronosticoPartidos= new int[9];
    do{
        PosicionArreglo=(contador*3)-1;
        if(ListaCheckBox[PosicionArreglo].isSelected())
            auxiliar=auxiliar+1;
        PosicionArreglo=PosicionArreglo-1;
        if(ListaCheckBox[PosicionArreglo].isSelected())
            auxiliar=auxiliar+2;
        PosicionArreglo=PosicionArreglo-1;
        if(ListaCheckBox[PosicionArreglo].isSelected())
            auxiliar=auxiliar+4;
        PronosticoPartidos[contador-1]=auxiliar;
        auxiliar=0;
        System.out.println("Partido"+contador+":"+PronosticoPartidos[contador-1]);
        contador=contador+1;
    }while(contador<10);
        return PronosticoPartidos;
    }
    
    public void ActualizaInterfaz(){
    JComboBox ListaComboBox[]={jComboBox1,jComboBox2,jComboBox3,jComboBox4,jComboBox5,jComboBox6,jComboBox7,jComboBox8,jComboBox9,jComboBox10,
    jComboBox11,jComboBox12,jComboBox13,jComboBox14,jComboBox15,jComboBox16,jComboBox17,jComboBox18,jComboBox19,jComboBox20,jComboBox21,
    jComboBox22,jComboBox23,jComboBox24,jComboBox25,jComboBox26,jComboBox27,jComboBox28,jComboBox29,jComboBox30,jComboBox31,jComboBox32,
    jComboBox33,jComboBox34,jComboBox35,jComboBox36,jComboBox37};
    JCheckBox[] ListaCheckBox = {jCheckBox1,jCheckBox2,jCheckBox3,jCheckBox4,jCheckBox5,jCheckBox6,jCheckBox7,jCheckBox8,jCheckBox9,jCheckBox10,
    jCheckBox11,jCheckBox12,jCheckBox13,jCheckBox14,jCheckBox15,jCheckBox16,jCheckBox17,jCheckBox18,jCheckBox19,jCheckBox20,jCheckBox21,
    jCheckBox22,jCheckBox23,jCheckBox24,jCheckBox25,jCheckBox26,jCheckBox27};
    JTextField[] ListaTextField = {jTextField1,jTextField2,jTextField3,jTextField4,jTextField5,jTextField6,jTextField7,
    jTextField8,jTextField9,jTextField10,jTextField11,jTextField12,jTextField13,jTextField14,jTextField15,jTextField16,
    jTextField17,jTextField18};
    JCheckBox[] ListaCheckBox2 = {jCheckBox28,jCheckBox29,jCheckBox30,jCheckBox31,jCheckBox32,jCheckBox33,jCheckBox34,jCheckBox35,jCheckBox36};
    //AgregarQuinielaCheckBox(ListaCheckBox);
    AgregarEquiposComboBox(ListaComboBox);
    PonerJornadaComboBox(ListaComboBox,15);
    //ActualizarTextField(ListaTextField);
    //ActualizarInterfaceTextFields(ListaCheckBox, ListaCheckBox2);
    }
    
    public void ActualizarInterfaceTextFields(JCheckBox ListaCheckBox[],JCheckBox ListaCheckBox2[]){
    int contador=1;
    int PosicionArreglo=0;
    int auxiliar=0;
    int [] PronosticoPartidos= ObtenerCheckBoxPronosticos(ListaCheckBox, ListaCheckBox2);
    do{
        String Pronostico="";
        if(PronosticoPartidos[contador-1]==1)
            Pronostico="Visitante";
        if(PronosticoPartidos[contador-1]==2)
            Pronostico="Empate";
        if(PronosticoPartidos[contador-1]==3)
            Pronostico="Empate, Visitante";
        if(PronosticoPartidos[contador-1]==4)
            Pronostico="Local";
        if(PronosticoPartidos[contador-1]==5)
            Pronostico="Local,Visitante";
        if(PronosticoPartidos[contador-1]==6)
            Pronostico="Local,Empate";
        if(PronosticoPartidos[contador-1]==7)
            Pronostico="Local,Empate,Visitante";
            ListaCheckBox2[contador-1].setText(Pronostico);
        auxiliar=0;
        contador=contador+1;
    }while(contador<10);
    }
    
    public void LimpiarIdsEquipos(){
    //String username="sql12272834";
    //String password="jInC6T7H6S";
    String query="SELECT Nombre FROM equipos ORDER BY Nombre ASC";
    int contador=0;
    int MaxIdEquipo=ContarEquipos();
    String[] Nombres = new String[MaxIdEquipo];
    Connection connection=null;
    ResultSet resultados=null;
    try{
String auxiliar="";
connection=DriverManager.getConnection(connectionPath,username,password);
PreparedStatement statement= connection.prepareStatement(query);
resultados=statement.executeQuery(query);
while (resultados.next()){
    Nombres[contador]=resultados.getString("Nombre");
    contador=contador+1;
}
statement.close();
connection.close();
    }catch(SQLException exception){
        JOptionPane.showMessageDialog(null, exception);
        System.err.println(exception);
    }
 contador=0;
 int Orden=0;
 query="UPDATE Equipos SET Orden = CASE Nombre";
 //Ya tengo los nombres en el arreglo Nombres[]
//UPDATE Equipos 
//   SET IdEquipo = CASE Nombre 
do{
    Orden=contador+1;
    query=query+" WHEN '"+Nombres[contador]+"' THEN "+Orden;
    contador=contador+1;
}while(contador<MaxIdEquipo);
query=query+" END;";
        System.out.println(query);
//   WHEN 'Lobos Buap'   THEN 30
//   END;   
 try{
connection=DriverManager.getConnection(connectionPath,username,password);
PreparedStatement statement= connection.prepareStatement(query);
        //System.out.println(query);
statement.executeUpdate();
statement.close();
connection.close();
    }catch(SQLException exception){
        JOptionPane.showMessageDialog(null, exception);
        System.err.println(exception);
    }
    }
    
    public void AgregarJornadaNueva(int jornada, int []IdEquipos){
        int contador=0;
        int posicion=1;
    //INSERT INTO jornada(IdJornada,P01,P02,P03,P04,P05,P06,P07,P08,P09,P10,P11,P12,P13,P14,P15,P16,P17,P18) 
    //VALUES(15,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18);
        String query="INSERT INTO jornada(IdJornada,P01,P02,P03,P04,P05,P06,P07,P08,P09,P10,P11,P12,P13,P14,P15,P16,P17,P18) VALUES("+jornada+",";
            do{
                query=query+
                IdEquipos[contador];
                if(contador<17)
                    query=query+",";
                else
                    query=query+");";
                contador++;
                    }while(contador<18);
  
        System.out.println(query);   
    //Hasta aqui parece que la query va bien, falta realizar los cambios en la tabla y continuar modificando este metodo
    Connection connection=null;
    ResultSet resultados=null;
    try{
    connection=DriverManager.getConnection(connectionPath,username,password);
    PreparedStatement statement= connection.prepareStatement(query);
    System.out.println(query);
    statement.executeUpdate();
    statement.close();
    connection.close();
    }catch(SQLException exception){
        JOptionPane.showMessageDialog(null, exception);
        System.err.println(exception);
    }
    }
    
    public void ActualizarJornada(int jornada, int []IdEquipos){
        int contador=0;
        int posicion=1;
        String auxiliar="";
    //UPDATE jornada SET P01=1,P02=2 WHERE IdJornada=15 
    
        String query="UPDATE jornada SET ";
            do{
                if((contador+1)>9)
                auxiliar="P"+(contador+1)+"=";
                else
                auxiliar="P0"+(contador+1)+"=";    
                query=query+
                auxiliar+
                IdEquipos[contador];
                if(contador<17)
                    query=query+",";
                else
                    query=query+" WHERE IdJornada="+jornada;
                contador++;
                    }while(contador<18);
  
        System.out.println(query);   
    //Hasta aqui parece que la query va bien, falta realizar los cambios en la tabla y continuar modificando este metodo
    Connection connection=null;
    ResultSet resultados=null;
    try{
    connection=DriverManager.getConnection(connectionPath,username,password);
    PreparedStatement statement= connection.prepareStatement(query);
    System.out.println(query);
    statement.executeUpdate();
    statement.close();
    connection.close();
    }catch(SQLException exception){
        JOptionPane.showMessageDialog(null, exception);
        System.err.println(exception);
    }
    }
    
    
    public void PonerJornadaComboBox(JComboBox ListaComboBox[],int jornada){
    // En este metodo se pone la jornada seleccionada en los comboBox
    //vamos a empezar a trabajar en este metodo
    //SELECT Orden FROM equipos INNER JOIN jornada ON equipos.IdEquipo=jornada.P08 WHERE IdJornada=12
    String query="SELECT Nombre FROM equipos ORDER BY Nombre ASC";
    String auxiliar="";
    int contador=0;
    int [] posiciones=new int[18];
    do{    
    if((contador+1)>9)
      auxiliar="P"+(contador+1);
    else
      auxiliar="P0"+(contador+1);  
    query="SELECT Orden FROM equipos INNER JOIN jornada ON equipos.IdEquipo=jornada."+auxiliar+" WHERE IdJornada="+jornada;
    Connection connection=null;
    ResultSet resultados=null;
    try{
connection=DriverManager.getConnection(connectionPath,username,password);
PreparedStatement statement= connection.prepareStatement(query);
resultados=statement.executeQuery(query);
while (resultados.next()){
    //Nombres[contador]=resultados.getString("Nombre");
    posiciones[contador]=resultados.getInt("Orden");
}
statement.close();
connection.close();
    }catch(SQLException exception){
        JOptionPane.showMessageDialog(null, exception);
        System.err.println(exception);
    }
    posiciones[contador]=posiciones[contador]-1;
    ListaComboBox[contador].setSelectedIndex(posiciones[contador]);
    ListaComboBox[contador+18].setSelectedIndex(posiciones[contador]);
    contador=contador+1;
    }while(contador<18);
    contador=0;
    
    }
    
    
    
    public void LimpiarInterfaz(){
    JComboBox ListaComboBox[]={jComboBox1,jComboBox2,jComboBox3,jComboBox4,jComboBox5,jComboBox6,jComboBox7,jComboBox8,jComboBox9,jComboBox10,
    jComboBox11,jComboBox12,jComboBox13,jComboBox14,jComboBox15,jComboBox16,jComboBox17,jComboBox18,jComboBox19,jComboBox20,jComboBox21,
    jComboBox22,jComboBox23,jComboBox24,jComboBox25,jComboBox26,jComboBox27,jComboBox28,jComboBox29,jComboBox30,jComboBox31,jComboBox32,
    jComboBox33,jComboBox34,jComboBox35,jComboBox36};
    JCheckBox[] ListaCheckBox = {jCheckBox1,jCheckBox2,jCheckBox3,jCheckBox4,jCheckBox5,jCheckBox6,jCheckBox7,jCheckBox8,jCheckBox9,jCheckBox10,
    jCheckBox11,jCheckBox12,jCheckBox13,jCheckBox14,jCheckBox15,jCheckBox16,jCheckBox17,jCheckBox18,jCheckBox19,jCheckBox20,jCheckBox21,
    jCheckBox22,jCheckBox23,jCheckBox24,jCheckBox25,jCheckBox26,jCheckBox27,jCheckBox28,jCheckBox29,jCheckBox30,jCheckBox31,jCheckBox32,jCheckBox33,jCheckBox34,jCheckBox35,jCheckBox36};
    JTextField[] ListaTextField = {jTextField1,jTextField2,jTextField3,jTextField4,jTextField5,jTextField6,jTextField7,
    jTextField8,jTextField9,jTextField10,jTextField11,jTextField12,jTextField13,jTextField14,jTextField15,jTextField16,
    jTextField17,jTextField18};
    
    int contador=ListaComboBox.length-1;
    do{
    ListaComboBox[contador].setSelectedIndex(0);
    contador=contador-1;
    }while(contador>=0);
    
    contador=ListaCheckBox.length-1;
    do{
    ListaCheckBox[contador].setSelected(false);
    contador=contador-1;
    }while(contador>=0);
    
    contador=ListaTextField.length-1;
    do{
    ListaTextField[contador].setText("0");
    contador=contador-1;
    }while(contador>=0);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox10;
    private javax.swing.JCheckBox jCheckBox11;
    private javax.swing.JCheckBox jCheckBox12;
    private javax.swing.JCheckBox jCheckBox13;
    private javax.swing.JCheckBox jCheckBox14;
    private javax.swing.JCheckBox jCheckBox15;
    private javax.swing.JCheckBox jCheckBox16;
    private javax.swing.JCheckBox jCheckBox17;
    private javax.swing.JCheckBox jCheckBox18;
    private javax.swing.JCheckBox jCheckBox19;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox20;
    private javax.swing.JCheckBox jCheckBox21;
    private javax.swing.JCheckBox jCheckBox22;
    private javax.swing.JCheckBox jCheckBox23;
    private javax.swing.JCheckBox jCheckBox24;
    private javax.swing.JCheckBox jCheckBox25;
    private javax.swing.JCheckBox jCheckBox26;
    private javax.swing.JCheckBox jCheckBox27;
    private javax.swing.JCheckBox jCheckBox28;
    private javax.swing.JCheckBox jCheckBox29;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox30;
    private javax.swing.JCheckBox jCheckBox31;
    private javax.swing.JCheckBox jCheckBox32;
    private javax.swing.JCheckBox jCheckBox33;
    private javax.swing.JCheckBox jCheckBox34;
    private javax.swing.JCheckBox jCheckBox35;
    private javax.swing.JCheckBox jCheckBox36;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JCheckBox jCheckBox5;
    private javax.swing.JCheckBox jCheckBox6;
    private javax.swing.JCheckBox jCheckBox7;
    private javax.swing.JCheckBox jCheckBox8;
    private javax.swing.JCheckBox jCheckBox9;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox10;
    private javax.swing.JComboBox<String> jComboBox11;
    private javax.swing.JComboBox<String> jComboBox12;
    private javax.swing.JComboBox<String> jComboBox13;
    private javax.swing.JComboBox<String> jComboBox14;
    private javax.swing.JComboBox<String> jComboBox15;
    private javax.swing.JComboBox<String> jComboBox16;
    private javax.swing.JComboBox<String> jComboBox17;
    private javax.swing.JComboBox<String> jComboBox18;
    private javax.swing.JComboBox<String> jComboBox19;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox20;
    private javax.swing.JComboBox<String> jComboBox21;
    private javax.swing.JComboBox<String> jComboBox22;
    private javax.swing.JComboBox<String> jComboBox23;
    private javax.swing.JComboBox<String> jComboBox24;
    private javax.swing.JComboBox<String> jComboBox25;
    private javax.swing.JComboBox<String> jComboBox26;
    private javax.swing.JComboBox<String> jComboBox27;
    private javax.swing.JComboBox<String> jComboBox28;
    private javax.swing.JComboBox<String> jComboBox29;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JComboBox<String> jComboBox30;
    private javax.swing.JComboBox<String> jComboBox31;
    private javax.swing.JComboBox<String> jComboBox32;
    private javax.swing.JComboBox<String> jComboBox33;
    private javax.swing.JComboBox<String> jComboBox34;
    private javax.swing.JComboBox<String> jComboBox35;
    private javax.swing.JComboBox<String> jComboBox36;
    private javax.swing.JComboBox<String> jComboBox37;
    private javax.swing.JComboBox<String> jComboBox4;
    private javax.swing.JComboBox<String> jComboBox5;
    private javax.swing.JComboBox<String> jComboBox6;
    private javax.swing.JComboBox<String> jComboBox7;
    private javax.swing.JComboBox<String> jComboBox8;
    private javax.swing.JComboBox<String> jComboBox9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField13;
    private javax.swing.JTextField jTextField14;
    private javax.swing.JTextField jTextField15;
    private javax.swing.JTextField jTextField16;
    private javax.swing.JTextField jTextField17;
    private javax.swing.JTextField jTextField18;
    private javax.swing.JTextField jTextField19;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    // End of variables declaration//GEN-END:variables
}
